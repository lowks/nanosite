title: documentation

{{{ docMenu }}}

# site generation

During site generation, each file is processed and the result is placed in the corresponding path in the output folder. Thus, the directory structure of your project is the directory structure of your site.

Files are processed as follows:

- `.md`, `.md+`, `.html+` and `.xml+` files are

1. Create a context with meta.json (which contains a dictionary) and macros.py
  - meta.json meta [key: value] pairs will be directly added to the context
  - macros.py is executed. The function [macro(s, fun)] is exposed, where [s] is the name of the context key that will invoke the macro, and [fun] is a lambda expression [lambda: ctx [, params] = ...] that takes in context [ctx] and outputs any stringable value. When the macro is invoked through {{key}}, the lambda expression is called with the current file's context as the parameter. These macros are all added to the context. Ex: macro("example", lambda: ctx = fetch("site.url")) declares a macro that fetches the site.url property from the context when invoked with {{example}}.
    - fetch(ctx, key) is also exposed, which allows access of context variables through dot notation. Ex: fetch(ctx, "site.url").
  - Master template is run once in order to register global variables and macros (the site directory is registered in the context for these macros to access). The output is not kept.
2. Traverse the site directory and its subdirectories, creating corresponding built files in respective paths in OutputDir.
  - Pipeline: a) File -> b) Local template -> c) Master template
    a) Each file gets turned into a dictionary which is passed to the local template.
      - Each file gets a context with a view of the directory tree, with names in lowercase and with all periods replaced with underscores (so ex.txt -> ex_txt)
        - Directories are represented by dictionaries with key name equal to lowercased directory name
        - Each file in the directory tree has properties is_file = True, path (path of output file [with the extension of the output file], relative to site top), template_path (path of its local template), and date (time struct) which contains the last date modified.

      - .md/.md+ files become {"content": [html-compiled content], [meta-key-1]: [meta-value-1], ...} where the meta entries come from the Markdown meta section. For .md files, escape delimiters so they aren't compiled as templates.
      - .html+ files become {"content": [c]} where c is the file's contents.
      - .xml+ files are compiled against themselves.
    b) .md, md+, and .html+ files are compiled against the local template, which is the template in the shallowest parent directory of the file that contains a template.tmpl file.
    c) .md, md+, and .html+ files are compiled against the master template.
  - Files with extensions other than .md, .md+, .html+ and .xml+ are simply copied to the output folder.


# packages
Calling "nanosite import [name]" will import a package.
If [name] isn't already in the ".nanosite" file's "installed-packages" array:

1. Search for package file
  a. Check [name].zip in top-level of site directory
  b. Check [package-url]/[name].zip where [package-url] is the value of the "package-url" entry in the site's ".nanosite" file. Download this to site root.
2. Install package
  a. Open "rules.json" in [name].zip. It should be a dictionary { }. Call it rules.
  b. Install dependencies: go through the import routine for each list item (dependency name) in rules["dependencies"].
  c. For each key (filename) in rules["files"], call its corresponding value rule. Get the destination path dest by compiling rule["dest"] against the default context (specifically with "OutputDir" and "MetaDir" entries). dest should be relative to the site top directory. Open dest with file mode rule["action"] ("a" for append, "w" for write) and write the contents of the file from [name].zip.
3. Finalize
  a. Add [name] to the array in the ".nanosite" file's "installed-packages" entry
  b. Delete [name].zip if downloaded from [package-url]


# context namespace map

- Top-level directory names
- Entries declared in meta/meta.json and meta/macros.py
- Meta entries if current file is a Markdown file
- "content": contains the content for the current template
- "MetaDir", "OutputDir"


# example directory structure

	site/
	  [index.html+]
	  [archive.html+]
	  output/ <- OutputDir
	  meta/   <- MetaDir
		master.tmpl
		meta.json
		macros.py
	  [pages]/
		template.tmpl
		[Life]/
		  [funstuff.md]
		[Work]/
		  template.tmpl
		  [meetings.md]
	  [posts]/
		template.tmpl
		[hello.md+]
		[codesamples.md+]
