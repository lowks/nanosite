nanosite: static site generator

Template language (given context ctx).
- {{key}}: replaced with ctx["key"], HTML characters escaped
  - {{key [param1 param2 .. paramN]}}: if ctx["key"] is a function, then it will be called with parameters [ctx], [param1], .. [paramN]. Parsing tries to figure out the appropriate type (supported: string, int, float). Use quotes ('"') around a parameter for strings with spaces.
- {{{key}}}: replaced with ctx["key"], no escape (i.e. for HTML insertion)
- {{#for x in key}}: if ctx["key"] is a collection, loop through its items
- {{#end for}}: end of for loop
- {{#if key}}: execute block if ctx["key"] evaluates to True
- {{#elif key}}: execute block if ctx["key"] evaluates to True and previous if/elifs evaluated to false
- {{#else}}: execute block if all previous if/elifs evaluated to false
- {{#end if}}: end of if block

- Keys can be nested with dot notation, e.g. if ctx = {"key": {"a": 3}}, then "key.a" will fetch the value 3


Site generation.
1. Create a context with meta.json (which contains a dictionary) and macros.py
  - meta.json meta [key: value] pairs will be directly added to the context
  - macros.py is executed. The function [macro(s, fun)] is exposed, where [s] is the name of the context key that will invoke the macro, and [fun] is a lambda expression [lambda: ctx = ...] that takes in context [ctx] and outputs any stringable value. When the macro is invoked through {{key}}, the lambda expression is called with the current file's context as the parameter. These macros are all added to the context.
2. Traverse SiteDir and its subdirectories, creating corresponding built files in respective paths in OutputDir.
  - Each file gets a context with a view of its subdirectory tree (not including the other files in its current directory), with names in lowercase and with file extensions removed.
  - .md files are converted to an (html, meta) tuple. This is compiled against the shallowest template.tmpl template in a parent folder (if it exists), with {"Content": html, "Meta": meta} appended to the context. Then the output is passed as {"Content": output} to fill the master template. This is saved as the output file. Finally, its entry in the context directory tree becomes {"Content": html, "Meta": meta} where html is the original compiled Markdown.
  - .md+ files are filled according to their context before following the standard .md procedure.
  - .html+ files are filled according to their context, then compiled against the shallowest template.tmpl template in a parent folder (if it exists), with {"Content": html} appended to the context. Then the output is passed as {"Content": output} to fill the master template. This is saved as the output file. Finally, its entry in the context directory tree becomes {"Content": html} where html is the output after the local template but before the master template.


Reserved context keywords. Directories cannot be named as these keywords, since their context entry would conflict.
- content, meta, SiteDir, MetaDir, OutputDir


Directory structure.
site/
  [index.html+]
  [archive.html+]
  output/ <- OutputDir
  meta/ <- MetaDir
    master.tmpl
    meta.json
    macros.py
  [pages]/
    template.tmpl
    [Life]/
      [funstuff.md]
    [Work]/
      specialized_template.tmpl
      [meetings.md]
  [posts]/
    template.tmpl
    [hello.md+]
    [codesamples.md+]
